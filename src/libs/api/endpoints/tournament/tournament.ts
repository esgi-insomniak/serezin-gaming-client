/**
 * Generated by orval üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  ForbiddenResponseDto,
  InternalServerErrorResponseDto,
  TournamentArrayOkResponseDto,
  TournamentBadRequestResponseDto,
  TournamentBodyCreateDto,
  TournamentCreatedResponseDto,
  TournamentGetAllParams,
  TournamentNotFoundResponseDto,
  TournamentOKResponseDto
} from '../../models';
import { customAxiosInstance } from '../../custom/customAxiosInstance';
import type { ErrorType } from '../../custom/customAxiosInstance';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const tournamentGetAll = (
  params?: TournamentGetAllParams,
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<TournamentArrayOkResponseDto>(
    { url: `/tournament`, method: 'GET', params, signal },
    options
  );
};

export const getTournamentGetAllQueryKey = (
  params?: TournamentGetAllParams
) => {
  return [`/tournament`, ...(params ? [params] : [])] as const;
};

export const getTournamentGetAllQueryOptions = <
  TData = Awaited<ReturnType<typeof tournamentGetAll>>,
  TError = ErrorType<
    TournamentBadRequestResponseDto | InternalServerErrorResponseDto
  >
>(
  params?: TournamentGetAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentGetAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTournamentGetAllQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof tournamentGetAll>>
  > = ({ signal }) => tournamentGetAll(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof tournamentGetAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type TournamentGetAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof tournamentGetAll>>
>;
export type TournamentGetAllQueryError = ErrorType<
  TournamentBadRequestResponseDto | InternalServerErrorResponseDto
>;

export function useTournamentGetAll<
  TData = Awaited<ReturnType<typeof tournamentGetAll>>,
  TError = ErrorType<
    TournamentBadRequestResponseDto | InternalServerErrorResponseDto
  >
>(
  params: undefined | TournamentGetAllParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentGetAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tournamentGetAll>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useTournamentGetAll<
  TData = Awaited<ReturnType<typeof tournamentGetAll>>,
  TError = ErrorType<
    TournamentBadRequestResponseDto | InternalServerErrorResponseDto
  >
>(
  params?: TournamentGetAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentGetAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tournamentGetAll>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useTournamentGetAll<
  TData = Awaited<ReturnType<typeof tournamentGetAll>>,
  TError = ErrorType<
    TournamentBadRequestResponseDto | InternalServerErrorResponseDto
  >
>(
  params?: TournamentGetAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentGetAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useTournamentGetAll<
  TData = Awaited<ReturnType<typeof tournamentGetAll>>,
  TError = ErrorType<
    TournamentBadRequestResponseDto | InternalServerErrorResponseDto
  >
>(
  params?: TournamentGetAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentGetAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getTournamentGetAllQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const tournamentCreate = (
  tournamentBodyCreateDto: TournamentBodyCreateDto,
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<TournamentCreatedResponseDto>(
    {
      url: `/tournament`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: tournamentBodyCreateDto,
      signal
    },
    options
  );
};

export const getTournamentCreateMutationOptions = <
  TError = ErrorType<
    | TournamentBadRequestResponseDto
    | ForbiddenResponseDto
    | InternalServerErrorResponseDto
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tournamentCreate>>,
    TError,
    { data: TournamentBodyCreateDto },
    TContext
  >;
  request?: SecondParameter<typeof customAxiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof tournamentCreate>>,
  TError,
  { data: TournamentBodyCreateDto },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tournamentCreate>>,
    { data: TournamentBodyCreateDto }
  > = (props) => {
    const { data } = props ?? {};

    return tournamentCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TournamentCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof tournamentCreate>>
>;
export type TournamentCreateMutationBody = TournamentBodyCreateDto;
export type TournamentCreateMutationError = ErrorType<
  | TournamentBadRequestResponseDto
  | ForbiddenResponseDto
  | InternalServerErrorResponseDto
>;

export const useTournamentCreate = <
  TError = ErrorType<
    | TournamentBadRequestResponseDto
    | ForbiddenResponseDto
    | InternalServerErrorResponseDto
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tournamentCreate>>,
    TError,
    { data: TournamentBodyCreateDto },
    TContext
  >;
  request?: SecondParameter<typeof customAxiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof tournamentCreate>>,
  TError,
  { data: TournamentBodyCreateDto },
  TContext
> => {
  const mutationOptions = getTournamentCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const tournamentGetOneById = (
  id: string,
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<TournamentOKResponseDto>(
    { url: `/tournament/${id}`, method: 'GET', signal },
    options
  );
};

export const getTournamentGetOneByIdQueryKey = (id: string) => {
  return [`/tournament/${id}`] as const;
};

export const getTournamentGetOneByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof tournamentGetOneById>>,
  TError = ErrorType<
    | TournamentBadRequestResponseDto
    | TournamentNotFoundResponseDto
    | InternalServerErrorResponseDto
  >
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentGetOneById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTournamentGetOneByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof tournamentGetOneById>>
  > = ({ signal }) => tournamentGetOneById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof tournamentGetOneById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type TournamentGetOneByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof tournamentGetOneById>>
>;
export type TournamentGetOneByIdQueryError = ErrorType<
  | TournamentBadRequestResponseDto
  | TournamentNotFoundResponseDto
  | InternalServerErrorResponseDto
>;

export function useTournamentGetOneById<
  TData = Awaited<ReturnType<typeof tournamentGetOneById>>,
  TError = ErrorType<
    | TournamentBadRequestResponseDto
    | TournamentNotFoundResponseDto
    | InternalServerErrorResponseDto
  >
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentGetOneById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tournamentGetOneById>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useTournamentGetOneById<
  TData = Awaited<ReturnType<typeof tournamentGetOneById>>,
  TError = ErrorType<
    | TournamentBadRequestResponseDto
    | TournamentNotFoundResponseDto
    | InternalServerErrorResponseDto
  >
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentGetOneById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tournamentGetOneById>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useTournamentGetOneById<
  TData = Awaited<ReturnType<typeof tournamentGetOneById>>,
  TError = ErrorType<
    | TournamentBadRequestResponseDto
    | TournamentNotFoundResponseDto
    | InternalServerErrorResponseDto
  >
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentGetOneById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useTournamentGetOneById<
  TData = Awaited<ReturnType<typeof tournamentGetOneById>>,
  TError = ErrorType<
    | TournamentBadRequestResponseDto
    | TournamentNotFoundResponseDto
    | InternalServerErrorResponseDto
  >
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentGetOneById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getTournamentGetOneByIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const tournamentRemoveById = (
  id: string,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<void>(
    { url: `/tournament/${id}`, method: 'DELETE' },
    options
  );
};

export const getTournamentRemoveByIdMutationOptions = <
  TError = ErrorType<
    TournamentNotFoundResponseDto | InternalServerErrorResponseDto
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tournamentRemoveById>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customAxiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof tournamentRemoveById>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tournamentRemoveById>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return tournamentRemoveById(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TournamentRemoveByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof tournamentRemoveById>>
>;

export type TournamentRemoveByIdMutationError = ErrorType<
  TournamentNotFoundResponseDto | InternalServerErrorResponseDto
>;

export const useTournamentRemoveById = <
  TError = ErrorType<
    TournamentNotFoundResponseDto | InternalServerErrorResponseDto
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tournamentRemoveById>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customAxiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof tournamentRemoveById>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getTournamentRemoveByIdMutationOptions(options);

  return useMutation(mutationOptions);
};
