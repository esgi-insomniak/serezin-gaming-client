/**
 * Generated by orval üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  InternalServerErrorResponseDto,
  TournamentArrayOkResponseDto,
  TournamentBadRequestResponseDto,
  TournamentCreatedResponseDto,
  TournamentFindAllParams,
  TournamentNotFoundResponseDto,
  TournamentOKResponseDto
} from '../../models';
import { customAxiosInstance } from '../../custom/customAxiosInstance';
import type { ErrorType } from '../../custom/customAxiosInstance';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const tournamentFindAll = (
  params?: TournamentFindAllParams,
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<TournamentArrayOkResponseDto>(
    { url: `/tournament`, method: 'GET', params, signal },
    options
  );
};

export const getTournamentFindAllQueryKey = (
  params?: TournamentFindAllParams
) => {
  return [`/tournament`, ...(params ? [params] : [])] as const;
};

export const getTournamentFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof tournamentFindAll>>,
  TError = ErrorType<
    TournamentBadRequestResponseDto | InternalServerErrorResponseDto
  >
>(
  params?: TournamentFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTournamentFindAllQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof tournamentFindAll>>
  > = ({ signal }) => tournamentFindAll(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof tournamentFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type TournamentFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof tournamentFindAll>>
>;
export type TournamentFindAllQueryError = ErrorType<
  TournamentBadRequestResponseDto | InternalServerErrorResponseDto
>;

export function useTournamentFindAll<
  TData = Awaited<ReturnType<typeof tournamentFindAll>>,
  TError = ErrorType<
    TournamentBadRequestResponseDto | InternalServerErrorResponseDto
  >
>(
  params: undefined | TournamentFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tournamentFindAll>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useTournamentFindAll<
  TData = Awaited<ReturnType<typeof tournamentFindAll>>,
  TError = ErrorType<
    TournamentBadRequestResponseDto | InternalServerErrorResponseDto
  >
>(
  params?: TournamentFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tournamentFindAll>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useTournamentFindAll<
  TData = Awaited<ReturnType<typeof tournamentFindAll>>,
  TError = ErrorType<
    TournamentBadRequestResponseDto | InternalServerErrorResponseDto
  >
>(
  params?: TournamentFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useTournamentFindAll<
  TData = Awaited<ReturnType<typeof tournamentFindAll>>,
  TError = ErrorType<
    TournamentBadRequestResponseDto | InternalServerErrorResponseDto
  >
>(
  params?: TournamentFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getTournamentFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const tournamentCreate = (
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<TournamentCreatedResponseDto>(
    { url: `/tournament`, method: 'POST', signal },
    options
  );
};

export const getTournamentCreateMutationOptions = <
  TError = ErrorType<
    TournamentBadRequestResponseDto | InternalServerErrorResponseDto
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tournamentCreate>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customAxiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof tournamentCreate>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tournamentCreate>>,
    void
  > = () => {
    return tournamentCreate(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TournamentCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof tournamentCreate>>
>;

export type TournamentCreateMutationError = ErrorType<
  TournamentBadRequestResponseDto | InternalServerErrorResponseDto
>;

export const useTournamentCreate = <
  TError = ErrorType<
    TournamentBadRequestResponseDto | InternalServerErrorResponseDto
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tournamentCreate>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customAxiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof tournamentCreate>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getTournamentCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const tournamentFindOne = (
  id: string,
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<TournamentOKResponseDto>(
    { url: `/tournament/${id}`, method: 'GET', signal },
    options
  );
};

export const getTournamentFindOneQueryKey = (id: string) => {
  return [`/tournament/${id}`] as const;
};

export const getTournamentFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof tournamentFindOne>>,
  TError = ErrorType<
    | TournamentBadRequestResponseDto
    | TournamentNotFoundResponseDto
    | InternalServerErrorResponseDto
  >
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTournamentFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof tournamentFindOne>>
  > = ({ signal }) => tournamentFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof tournamentFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type TournamentFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof tournamentFindOne>>
>;
export type TournamentFindOneQueryError = ErrorType<
  | TournamentBadRequestResponseDto
  | TournamentNotFoundResponseDto
  | InternalServerErrorResponseDto
>;

export function useTournamentFindOne<
  TData = Awaited<ReturnType<typeof tournamentFindOne>>,
  TError = ErrorType<
    | TournamentBadRequestResponseDto
    | TournamentNotFoundResponseDto
    | InternalServerErrorResponseDto
  >
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tournamentFindOne>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useTournamentFindOne<
  TData = Awaited<ReturnType<typeof tournamentFindOne>>,
  TError = ErrorType<
    | TournamentBadRequestResponseDto
    | TournamentNotFoundResponseDto
    | InternalServerErrorResponseDto
  >
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tournamentFindOne>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useTournamentFindOne<
  TData = Awaited<ReturnType<typeof tournamentFindOne>>,
  TError = ErrorType<
    | TournamentBadRequestResponseDto
    | TournamentNotFoundResponseDto
    | InternalServerErrorResponseDto
  >
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useTournamentFindOne<
  TData = Awaited<ReturnType<typeof tournamentFindOne>>,
  TError = ErrorType<
    | TournamentBadRequestResponseDto
    | TournamentNotFoundResponseDto
    | InternalServerErrorResponseDto
  >
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getTournamentFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const tournamentRemove = (
  id: string,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<void>(
    { url: `/tournament/${id}`, method: 'DELETE' },
    options
  );
};

export const getTournamentRemoveMutationOptions = <
  TError = ErrorType<
    TournamentNotFoundResponseDto | InternalServerErrorResponseDto
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tournamentRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customAxiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof tournamentRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tournamentRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return tournamentRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TournamentRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof tournamentRemove>>
>;

export type TournamentRemoveMutationError = ErrorType<
  TournamentNotFoundResponseDto | InternalServerErrorResponseDto
>;

export const useTournamentRemove = <
  TError = ErrorType<
    TournamentNotFoundResponseDto | InternalServerErrorResponseDto
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tournamentRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customAxiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof tournamentRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getTournamentRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};
