/**
 * Generated by orval üç∫
 * Do not edit manually.
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  TournamentArrayResponseDto,
  TournamentControllerFindAllParams,
  TournamentResponseDto
} from '../../models';
import type { ErrorType } from '../../custom/customAxiosInstance';
import { customAxiosInstance } from '../../custom/customAxiosInstance';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const tournamentControllerFindAll = (
  params?: TournamentControllerFindAllParams,
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<TournamentArrayResponseDto>(
    { url: `/tournament`, method: 'GET', params, signal },
    options
  );
};

export const getTournamentControllerFindAllQueryKey = (
  params?: TournamentControllerFindAllParams
) => {
  return [`/tournament`, ...(params ? [params] : [])] as const;
};

export const getTournamentControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof tournamentControllerFindAll>>,
  TError = ErrorType<unknown>
>(
  params?: TournamentControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTournamentControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof tournamentControllerFindAll>>
  > = ({ signal }) =>
    tournamentControllerFindAll(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof tournamentControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type TournamentControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof tournamentControllerFindAll>>
>;
export type TournamentControllerFindAllQueryError = ErrorType<unknown>;

export function useTournamentControllerFindAll<
  TData = Awaited<ReturnType<typeof tournamentControllerFindAll>>,
  TError = ErrorType<unknown>
>(
  params: undefined | TournamentControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tournamentControllerFindAll>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useTournamentControllerFindAll<
  TData = Awaited<ReturnType<typeof tournamentControllerFindAll>>,
  TError = ErrorType<unknown>
>(
  params?: TournamentControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tournamentControllerFindAll>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useTournamentControllerFindAll<
  TData = Awaited<ReturnType<typeof tournamentControllerFindAll>>,
  TError = ErrorType<unknown>
>(
  params?: TournamentControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useTournamentControllerFindAll<
  TData = Awaited<ReturnType<typeof tournamentControllerFindAll>>,
  TError = ErrorType<unknown>
>(
  params?: TournamentControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getTournamentControllerFindAllQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const tournamentControllerCreate = (
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<TournamentResponseDto>(
    { url: `/tournament`, method: 'POST', signal },
    options
  );
};

export const getTournamentControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tournamentControllerCreate>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customAxiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof tournamentControllerCreate>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tournamentControllerCreate>>,
    void
  > = () => {
    return tournamentControllerCreate(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TournamentControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof tournamentControllerCreate>>
>;

export type TournamentControllerCreateMutationError = ErrorType<unknown>;

export const useTournamentControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tournamentControllerCreate>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customAxiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof tournamentControllerCreate>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getTournamentControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const tournamentControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<TournamentResponseDto>(
    { url: `/tournament/${id}`, method: 'GET', signal },
    options
  );
};

export const getTournamentControllerFindOneQueryKey = (id: string) => {
  return [`/tournament/${id}`] as const;
};

export const getTournamentControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof tournamentControllerFindOne>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTournamentControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof tournamentControllerFindOne>>
  > = ({ signal }) => tournamentControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof tournamentControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type TournamentControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof tournamentControllerFindOne>>
>;
export type TournamentControllerFindOneQueryError = ErrorType<unknown>;

export function useTournamentControllerFindOne<
  TData = Awaited<ReturnType<typeof tournamentControllerFindOne>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tournamentControllerFindOne>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useTournamentControllerFindOne<
  TData = Awaited<ReturnType<typeof tournamentControllerFindOne>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tournamentControllerFindOne>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useTournamentControllerFindOne<
  TData = Awaited<ReturnType<typeof tournamentControllerFindOne>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useTournamentControllerFindOne<
  TData = Awaited<ReturnType<typeof tournamentControllerFindOne>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tournamentControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customAxiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getTournamentControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const tournamentControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<void>(
    { url: `/tournament/${id}`, method: 'DELETE' },
    options
  );
};

export const getTournamentControllerRemoveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tournamentControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customAxiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof tournamentControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tournamentControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return tournamentControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TournamentControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof tournamentControllerRemove>>
>;

export type TournamentControllerRemoveMutationError = ErrorType<unknown>;

export const useTournamentControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tournamentControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customAxiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof tournamentControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getTournamentControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};
