/**
 * Generated by orval üç∫
 * Do not edit manually.
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  TournamentResponseDto,
  TournamentsResponseDto,
} from "../../models";

export const getTournamentControllerFindAllResponseMock = (
  overrideResponse: Partial<TournamentsResponseDto> = {},
): TournamentsResponseDto => ({
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha(20)),
  ...overrideResponse,
});

export const getTournamentControllerCreateResponseMock = (
  overrideResponse: Partial<TournamentResponseDto> = {},
): TournamentResponseDto => ({ item: {}, ...overrideResponse });

export const getTournamentControllerFindOneResponseMock = (
  overrideResponse: Partial<TournamentResponseDto> = {},
): TournamentResponseDto => ({ item: {}, ...overrideResponse });

export const getTournamentControllerFindAllMockHandler = (
  overrideResponse?:
    | TournamentsResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TournamentsResponseDto> | TournamentsResponseDto),
) => {
  return http.get("https://mock.serezin-gaming.fr/tournament", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTournamentControllerFindAllResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTournamentControllerCreateMockHandler = (
  overrideResponse?:
    | TournamentResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<TournamentResponseDto> | TournamentResponseDto),
) => {
  return http.post(
    "https://mock.serezin-gaming.fr/tournament",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getTournamentControllerCreateResponseMock(),
        ),
        { status: 201, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getTournamentControllerFindOneMockHandler = (
  overrideResponse?:
    | TournamentResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TournamentResponseDto> | TournamentResponseDto),
) => {
  return http.get(
    "https://mock.serezin-gaming.fr/tournament/:id",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getTournamentControllerFindOneResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getTournamentControllerRemoveMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete(
    "https://mock.serezin-gaming.fr/tournament/:id",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 204 });
    },
  );
};
export const getTournamentMock = () => [
  getTournamentControllerFindAllMockHandler(),
  getTournamentControllerCreateMockHandler(),
  getTournamentControllerFindOneMockHandler(),
  getTournamentControllerRemoveMockHandler(),
];
