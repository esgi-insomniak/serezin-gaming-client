/**
 * Generated by orval üç∫
 * Do not edit manually.
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';
import type {
  AuthenticationExchangeCodeBadRequestResponseDto,
  AuthenticationExchangeCodeResponseDto,
  InternalServerErrorResponseDto
} from '../../models';
import { customAxiosInstance } from '../../custom/customAxiosInstance';
import type { ErrorType } from '../../custom/customAxiosInstance';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const authenticationExchangeCode = (
  code: string,
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<AuthenticationExchangeCodeResponseDto>(
    { url: `/authentication/exchange-code/${code}`, method: 'POST', signal },
    options
  );
};

export const getAuthenticationExchangeCodeMutationOptions = <
  TError = ErrorType<
    | AuthenticationExchangeCodeBadRequestResponseDto
    | InternalServerErrorResponseDto
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authenticationExchangeCode>>,
    TError,
    { code: string },
    TContext
  >;
  request?: SecondParameter<typeof customAxiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authenticationExchangeCode>>,
  TError,
  { code: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authenticationExchangeCode>>,
    { code: string }
  > = (props) => {
    const { code } = props ?? {};

    return authenticationExchangeCode(code, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthenticationExchangeCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof authenticationExchangeCode>>
>;

export type AuthenticationExchangeCodeMutationError = ErrorType<
  | AuthenticationExchangeCodeBadRequestResponseDto
  | InternalServerErrorResponseDto
>;

export const useAuthenticationExchangeCode = <
  TError = ErrorType<
    | AuthenticationExchangeCodeBadRequestResponseDto
    | InternalServerErrorResponseDto
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authenticationExchangeCode>>,
    TError,
    { code: string },
    TContext
  >;
  request?: SecondParameter<typeof customAxiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof authenticationExchangeCode>>,
  TError,
  { code: string },
  TContext
> => {
  const mutationOptions = getAuthenticationExchangeCodeMutationOptions(options);

  return useMutation(mutationOptions);
};
