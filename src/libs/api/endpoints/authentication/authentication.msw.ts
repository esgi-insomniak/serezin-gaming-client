/**
 * Generated by orval üç∫
 * Do not edit manually.
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import type { AuthenticateUserOkDto } from '../../models';

export const getAuthenticationGetMeResponseMock = (
  overrideResponse: Partial<AuthenticateUserOkDto> = {}
): AuthenticateUserOkDto => ({
  data: {
    discord: {
      avatar: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      global_name: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined
      ]),
      id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      username: faker.helpers.arrayElement([faker.string.alpha(20), undefined])
    },
    riot: {
      id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      name: faker.helpers.arrayElement([faker.string.alpha(20), undefined])
    }
  },
  message: faker.string.alpha(20),
  meta: {},
  statusCode: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse
});

export const getAuthenticationLoginMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.get(
    'https://mock.serezin-gaming.fr/authentication/login',
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === 'function') {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    }
  );
};

export const getAuthenticationGetMeMockHandler = (
  overrideResponse?:
    | AuthenticateUserOkDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<AuthenticateUserOkDto> | AuthenticateUserOkDto)
) => {
  return http.get(
    'https://mock.serezin-gaming.fr/authentication/me',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getAuthenticationGetMeResponseMock()
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      );
    }
  );
};

export const getAuthenticationRevokeTokenMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.delete(
    'https://mock.serezin-gaming.fr/authentication/revoke-token',
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === 'function') {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 204 });
    }
  );
};
export const getAuthenticationMock = () => [
  getAuthenticationLoginMockHandler(),
  getAuthenticationGetMeMockHandler(),
  getAuthenticationRevokeTokenMockHandler()
];
