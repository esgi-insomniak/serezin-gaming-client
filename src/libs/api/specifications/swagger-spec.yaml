openapi: 3.0.0
paths:
  /tournament:
    get:
      operationId: tournamentFindAll
      parameters:
        - name: itemsPerPage
          required: false
          in: query
          schema:
            type: number
        - name: page
          required: false
          in: query
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentArrayResponseDto'
      security:
        - defaultBearerAuth: []
      summary: ''
      tags: &a1
        - Tournament
    post:
      operationId: tournamentCreate
      parameters: []
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentResponseDto'
      summary: ''
      tags: *a1
  /tournament/{id}:
    get:
      operationId: tournamentFindOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentResponseDto'
      summary: ''
      tags: *a1
    delete:
      operationId: tournamentRemove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
      summary: ''
      tags: *a1
info:
  title: Serezin-Gaming docs
  description: ''
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    defaultBearerAuth:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    TournamentDto:
      type: object
      properties:
        id:
          type: string
        owner:
          type: string
        members:
          type: array
          items:
            type: string
        isArchived:
          type: boolean
      required:
        - id
        - owner
        - members
        - isArchived
    ResponsePaginationMetaDto:
      type: object
      properties:
        currentPage:
          type: number
        totalPages:
          type: number
        itemsPerPage:
          type: number
        totalItems:
          type: number
        haveNextPage:
          type: boolean
        havePreviousPage:
          type: boolean
      required:
        - currentPage
        - totalPages
        - itemsPerPage
        - totalItems
        - haveNextPage
        - havePreviousPage
    TournamentArrayResponseDto:
      type: object
      properties:
        statusCode:
          type: number
          example: 200
        message:
          type: string
          example: Success
        data:
          example:
            - &a2
              id: 51d0af06-f14b-4932-bba8-697201468cda
              owner: 60f51f4e-4e15-4c2b-9ba9-7675c850d81a
              members:
                - 60f51f4e-4e15-4c2b-9ba9-7675c850d81a
              isArchived: false
          type: array
          items:
            $ref: '#/components/schemas/TournamentDto'
        meta:
          $ref: '#/components/schemas/ResponsePaginationMetaDto'
      required:
        - statusCode
        - message
        - data
        - meta
    TournamentResponseDto:
      type: object
      properties:
        statusCode:
          type: number
          example: 200
        message:
          type: string
          example: Success
        data:
          example: *a2
          allOf:
            - $ref: '#/components/schemas/TournamentDto'
        meta:
          type: object
      required:
        - statusCode
        - message
        - data
        - meta
